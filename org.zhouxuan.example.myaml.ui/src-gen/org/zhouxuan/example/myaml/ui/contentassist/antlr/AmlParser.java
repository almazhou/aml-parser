/*
* generated by Xtext
*/
package org.zhouxuan.example.myaml.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.zhouxuan.example.myaml.services.AmlGrammarAccess;

public class AmlParser extends AbstractContentAssistParser {
	
	@Inject
	private AmlGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser createParser() {
		org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser result = new org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementsAccess().getAlternatives(), "rule__AbstractElements__Alternatives");
					put(grammarAccess.getSuperNamesAccess().getAlternatives(), "rule__SuperNames__Alternatives");
					put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
					put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
					put(grammarAccess.getLengthFeatureAccess().getGroup(), "rule__LengthFeature__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
					put(grammarAccess.getNetWorkFeatureAccess().getGroup(), "rule__NetWorkFeature__Group__0");
					put(grammarAccess.getColorFeatureAccess().getGroup(), "rule__ColorFeature__Group__0");
					put(grammarAccess.getAmlAccess().getElementsAssignment(), "rule__Aml__ElementsAssignment");
					put(grammarAccess.getSuperEntityAccess().getNameAssignment(), "rule__SuperEntity__NameAssignment");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1(), "rule__Entity__SuperTypeAssignment_2_1");
					put(grammarAccess.getEntityAccess().getColorFeatureAssignment_4(), "rule__Entity__ColorFeatureAssignment_4");
					put(grammarAccess.getEntityAccess().getNetworkFeatureAssignment_5(), "rule__Entity__NetworkFeatureAssignment_5");
					put(grammarAccess.getEntityAccess().getLengthFeatureAssignment_6(), "rule__Entity__LengthFeatureAssignment_6");
					put(grammarAccess.getEntityAccess().getFeaturesAssignment_7(), "rule__Entity__FeaturesAssignment_7");
					put(grammarAccess.getFeatureAccess().getNameAssignment_0(), "rule__Feature__NameAssignment_0");
					put(grammarAccess.getFeatureAccess().getValueAssignment_2(), "rule__Feature__ValueAssignment_2");
					put(grammarAccess.getLengthFeatureAccess().getNameAssignment_0(), "rule__LengthFeature__NameAssignment_0");
					put(grammarAccess.getLengthFeatureAccess().getValueAssignment_2(), "rule__LengthFeature__ValueAssignment_2");
					put(grammarAccess.getNetWorkFeatureAccess().getNameAssignment_0(), "rule__NetWorkFeature__NameAssignment_0");
					put(grammarAccess.getNetWorkFeatureAccess().getValueAssignment_2(), "rule__NetWorkFeature__ValueAssignment_2");
					put(grammarAccess.getColorFeatureAccess().getNameAssignment_0(), "rule__ColorFeature__NameAssignment_0");
					put(grammarAccess.getColorFeatureAccess().getValueAssignment_2(), "rule__ColorFeature__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser typedParser = (org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser) parser;
			typedParser.entryRuleAml();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AmlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AmlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
