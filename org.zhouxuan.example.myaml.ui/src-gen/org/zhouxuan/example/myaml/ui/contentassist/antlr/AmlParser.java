/*
* generated by Xtext
*/
package org.zhouxuan.example.myaml.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.zhouxuan.example.myaml.services.AmlGrammarAccess;

public class AmlParser extends AbstractContentAssistParser {
	
	@Inject
	private AmlGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser createParser() {
		org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser result = new org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementsAccess().getAlternatives(), "rule__AbstractElements__Alternatives");
					put(grammarAccess.getSuperEntityAccess().getAlternatives(), "rule__SuperEntity__Alternatives");
					put(grammarAccess.getColorAccess().getAlternatives(), "rule__Color__Alternatives");
					put(grammarAccess.getMinMaxAccess().getGroup(), "rule__MinMax__Group__0");
					put(grammarAccess.getMaxFeatureAccess().getGroup(), "rule__MaxFeature__Group__0");
					put(grammarAccess.getProductPUIDFeatureAccess().getGroup(), "rule__ProductPUIDFeature__Group__0");
					put(grammarAccess.getProductPUIDFeatureAccess().getGroup_3(), "rule__ProductPUIDFeature__Group_3__0");
					put(grammarAccess.getTargetGroupFeatureAccess().getGroup(), "rule__TargetGroupFeature__Group__0");
					put(grammarAccess.getDriveAccess().getGroup(), "rule__Drive__Group__0");
					put(grammarAccess.getFormFeatureAccess().getGroup(), "rule__FormFeature__Group__0");
					put(grammarAccess.getSpeedFeatureAccess().getGroup(), "rule__SpeedFeature__Group__0");
					put(grammarAccess.getSizeFeatureAccess().getGroup(), "rule__SizeFeature__Group__0");
					put(grammarAccess.getTypeFeatureAccess().getGroup(), "rule__TypeFeature__Group__0");
					put(grammarAccess.getCableAccess().getGroup(), "rule__Cable__Group__0");
					put(grammarAccess.getPriceRuleAccess().getGroup(), "rule__PriceRule__Group__0");
					put(grammarAccess.getPriceRuleAccess().getGroup_2(), "rule__PriceRule__Group_2__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
					put(grammarAccess.getLengthFeatureAccess().getGroup(), "rule__LengthFeature__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
					put(grammarAccess.getNetWorkFeatureAccess().getGroup(), "rule__NetWorkFeature__Group__0");
					put(grammarAccess.getColorFeatureAccess().getGroup(), "rule__ColorFeature__Group__0");
					put(grammarAccess.getAmlAccess().getElementsAssignment(), "rule__Aml__ElementsAssignment");
					put(grammarAccess.getMinMaxAccess().getNameAssignment_0(), "rule__MinMax__NameAssignment_0");
					put(grammarAccess.getMinMaxAccess().getTargetGroupFeatureAssignment_2(), "rule__MinMax__TargetGroupFeatureAssignment_2");
					put(grammarAccess.getMinMaxAccess().getProductPuidsFeatureAssignment_3(), "rule__MinMax__ProductPuidsFeatureAssignment_3");
					put(grammarAccess.getMinMaxAccess().getMaxFeatureAssignment_4(), "rule__MinMax__MaxFeatureAssignment_4");
					put(grammarAccess.getMaxFeatureAccess().getNameAssignment_0(), "rule__MaxFeature__NameAssignment_0");
					put(grammarAccess.getMaxFeatureAccess().getValueAssignment_2(), "rule__MaxFeature__ValueAssignment_2");
					put(grammarAccess.getProductPUIDFeatureAccess().getNameAssignment_0(), "rule__ProductPUIDFeature__NameAssignment_0");
					put(grammarAccess.getProductPUIDFeatureAccess().getValuesAssignment_2(), "rule__ProductPUIDFeature__ValuesAssignment_2");
					put(grammarAccess.getProductPUIDFeatureAccess().getValuesAssignment_3_1(), "rule__ProductPUIDFeature__ValuesAssignment_3_1");
					put(grammarAccess.getTargetGroupFeatureAccess().getNameAssignment_0(), "rule__TargetGroupFeature__NameAssignment_0");
					put(grammarAccess.getTargetGroupFeatureAccess().getValueAssignment_2(), "rule__TargetGroupFeature__ValueAssignment_2");
					put(grammarAccess.getDriveAccess().getNameAssignment_0(), "rule__Drive__NameAssignment_0");
					put(grammarAccess.getDriveAccess().getTypeFeatureAssignment_2(), "rule__Drive__TypeFeatureAssignment_2");
					put(grammarAccess.getDriveAccess().getSizeFeatureAssignment_3(), "rule__Drive__SizeFeatureAssignment_3");
					put(grammarAccess.getDriveAccess().getSpeedFeatureAssignment_4(), "rule__Drive__SpeedFeatureAssignment_4");
					put(grammarAccess.getDriveAccess().getFormFeatureAssignment_5(), "rule__Drive__FormFeatureAssignment_5");
					put(grammarAccess.getFormFeatureAccess().getNameAssignment_0(), "rule__FormFeature__NameAssignment_0");
					put(grammarAccess.getFormFeatureAccess().getValueAssignment_2(), "rule__FormFeature__ValueAssignment_2");
					put(grammarAccess.getSpeedFeatureAccess().getNameAssignment_0(), "rule__SpeedFeature__NameAssignment_0");
					put(grammarAccess.getSpeedFeatureAccess().getValueAssignment_2(), "rule__SpeedFeature__ValueAssignment_2");
					put(grammarAccess.getSizeFeatureAccess().getNameAssignment_0(), "rule__SizeFeature__NameAssignment_0");
					put(grammarAccess.getSizeFeatureAccess().getValueAssignment_2(), "rule__SizeFeature__ValueAssignment_2");
					put(grammarAccess.getTypeFeatureAccess().getNameAssignment_0(), "rule__TypeFeature__NameAssignment_0");
					put(grammarAccess.getTypeFeatureAccess().getValueAssignment_2(), "rule__TypeFeature__ValueAssignment_2");
					put(grammarAccess.getCableAccess().getNameAssignment_0(), "rule__Cable__NameAssignment_0");
					put(grammarAccess.getCableAccess().getColorFeatureAssignment_2(), "rule__Cable__ColorFeatureAssignment_2");
					put(grammarAccess.getCableAccess().getNetworkFeatureAssignment_3(), "rule__Cable__NetworkFeatureAssignment_3");
					put(grammarAccess.getCableAccess().getLengthFeatureAssignment_4(), "rule__Cable__LengthFeatureAssignment_4");
					put(grammarAccess.getPriceRuleAccess().getNameAssignment_1(), "rule__PriceRule__NameAssignment_1");
					put(grammarAccess.getPriceRuleAccess().getSuperTypeAssignment_2_1(), "rule__PriceRule__SuperTypeAssignment_2_1");
					put(grammarAccess.getPriceRuleAccess().getFeaturesAssignment_4(), "rule__PriceRule__FeaturesAssignment_4");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1(), "rule__Entity__SuperTypeAssignment_2_1");
					put(grammarAccess.getEntityAccess().getFeaturesAssignment_4(), "rule__Entity__FeaturesAssignment_4");
					put(grammarAccess.getFeatureAccess().getNameAssignment_0(), "rule__Feature__NameAssignment_0");
					put(grammarAccess.getFeatureAccess().getValueAssignment_2(), "rule__Feature__ValueAssignment_2");
					put(grammarAccess.getLengthFeatureAccess().getNameAssignment_0(), "rule__LengthFeature__NameAssignment_0");
					put(grammarAccess.getLengthFeatureAccess().getValueAssignment_2(), "rule__LengthFeature__ValueAssignment_2");
					put(grammarAccess.getNetWorkFeatureAccess().getNameAssignment_0(), "rule__NetWorkFeature__NameAssignment_0");
					put(grammarAccess.getNetWorkFeatureAccess().getValueAssignment_2(), "rule__NetWorkFeature__ValueAssignment_2");
					put(grammarAccess.getColorFeatureAccess().getNameAssignment_0(), "rule__ColorFeature__NameAssignment_0");
					put(grammarAccess.getColorFeatureAccess().getValueAssignment_2(), "rule__ColorFeature__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser typedParser = (org.zhouxuan.example.myaml.ui.contentassist.antlr.internal.InternalAmlParser) parser;
			typedParser.entryRuleAml();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AmlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AmlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
